"""
집에서 시간을 보내던 오영식은 박성원의 부름을 받고 급히 달려왔다. 
박성원이 캠프 때 쓸 N개의 랜선을 만들어야 하는데 너무 바빠서 영식이에게 도움을 청했다.

이미 오영식은 자체적으로 K개의 랜선을 가지고 있다. 그러나 K개의 랜선은 길이가 제각각이다. 
박성원은 랜선을 모두 N개의 같은 길이의 랜선으로 만들고 싶었기 때문에 K개의 랜선을 잘라서 만들어야 한다. 
예를 들어 300cm 짜리 랜선에서 140cm 짜리 랜선을 두 개 잘라내면 20cm는 버려야 한다. (이미 자른 랜선은 붙일 수 없다.)

편의를 위해 랜선을 자르거나 만들 때 손실되는 길이는 없다고 가정하며, 기존의 K개의 랜선으로 N개의 랜선을 만들 수 없는 경우는 없다고 가정하자. 
그리고 자를 때는 항상 센티미터 단위로 정수길이만큼 자른다고 가정하자. N개보다 많이 만드는 것도 N개를 만드는 것에 포함된다.
이때 만들 수 있는 최대 랜선의 길이를 구하는 프로그램을 작성하시오.
"""
"""
이분 탐색은 탐색 범위를 좁혀나가면서 값을 찾아가는 방법으로, 
  - 이 코드에서는 최소 길이와 최대 길이를 이용하여 mid 값을 구하고, 
  - mid 값을 기준으로 랜선을 자르고 잘린 랜선의 개수를 구한다.
  
그 후, 잘린 랜선의 개수가 필요한 랜선의 개수 이상인지 이하인지에 따라서 이분 탐색 범위를 좁혀나가게 된다.

마지막에는 탐색 범위가 더 이상 좁아지지 않을 때의 e값이 가장 긴 랜선의 길이가 되어 출력된다.
"""

# 내 풀이
import sys
input = sys.stdin.readline

N, M = map(int,input().split())  # 가지고 있는 랜선의 개수(N)와 필요한 랜선의 개수(K)를 입력

lines = []  # 전선 저장 배열

for i in range(N):   # 가지고 있는 랜선의 길이를 입력받아 리스트에 추가
  lines.append(int(input()))

left = 1   # 최소 길이를 1로 설정
right = max(lines)  # 최대 길이를 가지고 있는 랜선 중 가장 긴 길이로 설정

while(left <= right):  # 이분 탐색을 시작
  mid = (left+right)//2  # 중간 값
  sum = 0  # 잘라진 랜선의 개수를 초기화

  for line in lines:
    sum += line//mid  # 랜선을 mid 길이로 잘랐을 때, 잘라진 랜선의 개수

  if sum >= M:  # 필요한 랜선의 개수(K) 이상을 만들 수 있는 경우
    left = mid + 1  # mid+1부터 e까지 탐색

  else:  # 필요한 랜선의 개수(K)를 만들 수 없는 경우
    right = mid -1 # s부터 mid-1까지 탐색

print(right)
