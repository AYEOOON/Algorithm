""" 
당신의 친구들이 이번 달까지 선물을 주고받은 기록을 바탕으로 다음 달에 누가 선물을 많이 받을지 예측하려고 합니다.

- 두 사람이 선물을 주고받은 기록이 있다면, 이번 달까지 두 사람 사이에 더 많은 선물을 준 사람이 다음 달에 선물을 하나 받습니다.
  예를 들어 A가 B에게 선물을 5번 줬고, B가 A에게 선물을 3번 줬다면 다음 달엔 A가 B에게 선물을 하나 받습니다.

- 두 사람이 선물을 주고받은 기록이 하나도 없거나 주고받은 수가 같다면, 선물 지수가 더 큰 사람이 선물 지수가 더 작은 사람에게 선물을 하나 받습니다.
선물 지수는 이번 달까지 자신이 친구들에게 준 선물의 수에서 받은 선물의 수를 뺀 값입니다.
  예를 들어 A가 친구들에게 준 선물이 3개고 받은 선물이 10개라면 A의 선물 지수는 -7입니다. B가 친구들에게 준 선물이 3개고 받은 선물이 2개라면 B의 선물 지수는 1입니다. 만약 A와 B가 선물을 주고받은 적이 없거나 정확히 같은 수로 선물을 주고받았다면, 다음 달엔 B가 A에게 선물을 하나 받습니다.
  만약 두 사람의 선물 지수도 같다면 다음 달에 선물을 주고받지 않습니다.
  
위에서 설명한 규칙대로 다음 달에 선물을 주고받을 때, 당신은 선물을 가장 많이 받을 친구가 받을 선물의 수를 알고 싶습니다.
친구들의 이름을 담은 1차원 문자열 배열 friends 이번 달까지 친구들이 주고받은 선물 기록을 담은 1차원 문자열 배열 gifts가 매개변수로 주어집니다. 이때, 다음달에 가장 많은 선물을 받는 친구가 받을 선물의 수를 return 하도록 solution 함수를 완성해 주세요.

"""

"""
<풀이 아이디어>
입출력 예제에 나온 그대로 선물 지수 배열과 선물 현황 2차원 배열을 선언해 값을 세팅하고 친구가 받아야 하는 선물의 개수를 산출해 최대 값을 리턴하면 되는 문제
- 친구 이름을 key, index 값 value로 가지는 dict (선물 지수 배열과 선물 현황 배열의 인덱스 값 )
- 선물 지수 배열은 선물을 받으면 --연산, 선물을 주면 ++연산
- 선물 현황 배열은 [ 선물을 준 사람, 선물을 받은 사람 ] 의 개수를 알기 위한 2차원 배열

선물을 받아야하는 조건
- 내가 받은 선물보다 준 선물이 많은 경우
- 받은 선물과 준 선물의 개수가 같을 때, 선물 지수가 비교 대상 친구보다 더 낮은 경우

"""

# 내 풀이
def solution(friends, gifts):
    give = [[0 for _ in range(len(friends))] for _ in range(len(friends))]   # 주고받은 선물을 나타낼 표
    gift_score =  dict.fromkeys(friends,0)  # 이름:선물지수로 나타내는 딕셔너리
    answer = 0  # 제일 많은 선물 수 저장
    
    for i in gifts:
        a = i.split() # 문자열을 공백 기준으로 나눠줌
        give[friends.index(a[0])][friends.index(a[1])] += 1  # 표 채워넣기
        gift_score[a[0]] += 1  # 0은 선물을 준 것
        gift_score[a[1]] -= 1  # 1은 선물을 받은 것
        
    for j in range(len(friends)):
        take = 0  # 현재 받을 선물갯수
        for k in range(len(friends)):
            if j == k:  # 나 자신이기 때문에 패스
                continue

            # 준 선물 수가 많거나 주고받은 선물 수가 같은경우 선물지수가 더 높은 경우 
            if (give[j][k] > give[k][j]) or (give[j][k] == give[k][j] and gift_score[friends[j]] > gift_score[friends[k]]) :
                take += 1 # 받을 선물 갯수 증가
                
        if answer < take:
            answer = take
                
            
    return answer
